{"ast":null,"code":"const express = require('express');\n\nconst app = express();\n\nconst bodyParser = require('body-parser');\n\nconst cors = require('cors');\n\nconst mongoose = require('mongoose');\n\nconst todoRoutes = express.Router();\nconst PORT = 4000;\n\nlet Todo = require('./todo.model');\n\napp.use(cors());\napp.use(bodyParser.json());\nmongoose.connect('mongodb://127.0.0.1:27017/todos', {\n  useNewUrlParser: true\n});\nconst connection = mongoose.connection;\nconnection.once('open', function () {\n  console.log(\"MongoDB database connection established successfully\");\n});\ntodoRoutes.route('/').get(function (req, res) {\n  Todo.find(function (err, todos) {\n    if (err) {\n      console.log(err);\n    } else {\n      res.json(todos);\n    }\n  });\n});\ntodoRoutes.route('/:id').get(function (req, res) {\n  let id = req.params.id;\n  Todo.findById(id, function (err, todo) {\n    res.json(todo);\n  });\n});\ntodoRoutes.route('/update/:id').post(function (req, res) {\n  Todo.findById(req.params.id, function (err, todo) {\n    if (!todo) res.status(404).send(\"data is not found\");else todo.todo_description = req.body.todo_description;\n    todo.todo_responsible = req.body.todo_responsible;\n    todo.todo_priority = req.body.todo_priority;\n    todo.todo_completed = req.body.todo_completed;\n    todo.save().then(todo => {\n      res.json('Todo updated!');\n    }).catch(err => {\n      res.status(400).send(\"Update not possible\");\n    });\n  });\n});\ntodoRoutes.route('/add').post(function (req, res) {\n  let todo = new Todo(req.body);\n  todo.save().then(todo => {\n    res.status(200).json({\n      'todo': 'todo added successfully'\n    });\n  }).catch(err => {\n    res.status(400).send('adding new todo failed');\n  });\n});\napp.use('/todos', todoRoutes);\napp.listen(PORT, function () {\n  console.log(\"Server is running on Port: \" + PORT);\n});","map":{"version":3,"sources":["/Users/bo4/Desktop/mern-todo-app/src/App.js"],"names":["express","require","app","bodyParser","cors","mongoose","todoRoutes","Router","PORT","Todo","use","json","connect","useNewUrlParser","connection","once","console","log","route","get","req","res","find","err","todos","id","params","findById","todo","post","status","send","todo_description","body","todo_responsible","todo_priority","todo_completed","save","then","catch","listen"],"mappings":"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","sourcesContent":["const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\nconst mongoose = require('mongoose');\nconst todoRoutes = express.Router();\nconst PORT = 4000;\nlet Todo = require('./todo.model');\napp.use(cors());\napp.use(bodyParser.json());\nmongoose.connect('mongodb://127.0.0.1:27017/todos', { useNewUrlParser: true });\nconst connection = mongoose.connection;\nconnection.once('open', function() {\n    console.log(\"MongoDB database connection established successfully\");\n})\ntodoRoutes.route('/').get(function(req, res) {\n    Todo.find(function(err, todos) {\n        if (err) {\n            console.log(err);\n        } else {\n            res.json(todos);\n        }\n    });\n});\ntodoRoutes.route('/:id').get(function(req, res) {\n    let id = req.params.id;\n    Todo.findById(id, function(err, todo) {\n        res.json(todo);\n    });\n});\ntodoRoutes.route('/update/:id').post(function(req, res) {\n    Todo.findById(req.params.id, function(err, todo) {\n        if (!todo)\n            res.status(404).send(\"data is not found\");\n        else\n            todo.todo_description = req.body.todo_description;\n            todo.todo_responsible = req.body.todo_responsible;\n            todo.todo_priority = req.body.todo_priority;\n            todo.todo_completed = req.body.todo_completed;\n            todo.save().then(todo => {\n                res.json('Todo updated!');\n            })\n            .catch(err => {\n                res.status(400).send(\"Update not possible\");\n            });\n    });\n});\ntodoRoutes.route('/add').post(function(req, res) {\n    let todo = new Todo(req.body);\n    todo.save()\n        .then(todo => {\n            res.status(200).json({'todo': 'todo added successfully'});\n        })\n        .catch(err => {\n            res.status(400).send('adding new todo failed');\n        });\n});\napp.use('/todos', todoRoutes);\napp.listen(PORT, function() {\n    console.log(\"Server is running on Port: \" + PORT);\n});"]},"metadata":{},"sourceType":"module"}